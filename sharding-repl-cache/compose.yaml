version: '3'

services:
  # Сервер конфигурации
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.18.0.10
    volumes:
      - config-data:/data/db
    entrypoint: [ "/bin/bash", "-c", "mongod --configsvr --replSet config_server --bind_ip_all --port 27017" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард
  shard1a:
    image: mongo:latest
    container_name: shard1a
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.18.0.9
    volumes:
      - shard1a-data:/data/db
    entrypoint: [ "/bin/bash", "-c", "mongod --shardsvr --replSet shard1 --bind_ip_all --port 27018" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1b:
    image: mongo:latest
    container_name: shard1b
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.18.0.11
    volumes:
      - shard1b-data:/data/db
    entrypoint: [ "/bin/bash", "-c", "mongod --shardsvr --replSet shard1 --bind_ip_all --port 27019" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1c:
    image: mongo:latest
    container_name: shard1c
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.18.0.12
    volumes:
      - shard1c-data:/data/db
    entrypoint: [ "/bin/bash", "-c", "mongod --shardsvr --replSet shard1 --bind_ip_all --port 27020" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард
  shard2a:
    image: mongo:latest
    container_name: shard2a
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.18.0.13
    volumes:
      - shard2a-data:/data/db
    entrypoint: [ "/bin/bash", "-c", "mongod --shardsvr --replSet shard2 --bind_ip_all --port 27021" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2b:
    image: mongo:latest
    container_name: shard2b
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.18.0.14
    volumes:
      - shard2b-data:/data/db
    entrypoint: [ "/bin/bash", "-c", "mongod --shardsvr --replSet shard2 --bind_ip_all --port 27022" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2c:
    image: mongo:latest
    container_name: shard2c
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.18.0.15
    volumes:
      - shard2c-data:/data/db
    entrypoint: [ "/bin/bash", "-c", "mongod --shardsvr --replSet shard2 --bind_ip_all --port 27023" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # Роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.18.0.7
    command: [ "/bin/bash", "-c", "mongos --configdb config_server/configSrv:27017 --bind_ip_all --port 27024 & sleep 10 && /scripts/init.sh" ]
    volumes:
      - ./scripts:/scripts
    depends_on:
      - configSrv
      - shard1a
      - shard1b
      - shard1c
      - shard2a
      - shard2b
      - shard2c
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # PyMongo API
  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27024"
      MONGODB_DATABASE_NAME: "somedb"
      # Требует изменение в кодовой базе, поэтому оставил только один мастер.
      REDIS_URL: "redis://redis_1:6379"
    networks:
      app-network:
        ipv4_address: 173.18.0.5

  # Redis Cluster
  redis_1:
    image: "redis:latest"
    container_name: redis_1
    ports:
      - "6379:6379"
    volumes:
      - redis_1_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.18.0.2

  redis_2:
    image: "redis:latest"
    container_name: redis_2
    ports:
      - "6380:6379"
    volumes:
      - redis_2_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.18.0.3

  redis_3:
    image: "redis:latest"
    container_name: redis_3
    ports:
      - "6381:6379"
    volumes:
      - redis_3_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.18.0.4

  redis_4:
    image: "redis:latest"
    container_name: redis_4
    ports:
      - "6382:6379"
    volumes:
      - redis_4_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.18.0.17

  redis_5:
    image: "redis:latest"
    container_name: redis_5
    ports:
      - "6383:6379"
    volumes:
      - redis_5_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.18.0.6

  redis_6:
    image: "redis:latest"
    container_name: redis_6
    ports:
      - "6384:6379"
    volumes:
      - redis_6_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.18.0.16

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.18.0.0/16

volumes:
  config-data:
  shard1a-data:
  shard1b-data:
  shard1c-data:
  shard2a-data:
  shard2b-data:
  shard2c-data:
  redis_1_data: { }
  redis_2_data: { }
  redis_3_data: { }
  redis_4_data: { }
  redis_5_data: { }
  redis_6_data: { }